// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: command_history.sql

package db

import (
	"context"
)

const createCommandHistory = `-- name: CreateCommandHistory :one
INSERT INTO command_history (
    id,
    session_id,
    command_text,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, strftime('%s', 'now'), strftime('%s', 'now')
)
RETURNING id, session_id, command_text, created_at, updated_at
`

type CreateCommandHistoryParams struct {
	ID          string `json:"id"`
	SessionID   string `json:"session_id"`
	CommandText string `json:"command_text"`
}

func (q *Queries) CreateCommandHistory(ctx context.Context, arg CreateCommandHistoryParams) (CommandHistory, error) {
	row := q.queryRow(ctx, q.createCommandHistoryStmt, createCommandHistory, arg.ID, arg.SessionID, arg.CommandText)
	var i CommandHistory
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.CommandText,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSessionCommandHistory = `-- name: DeleteSessionCommandHistory :exec
DELETE FROM command_history
WHERE session_id = ?
`

func (q *Queries) DeleteSessionCommandHistory(ctx context.Context, sessionID string) error {
	_, err := q.exec(ctx, q.deleteSessionCommandHistoryStmt, deleteSessionCommandHistory, sessionID)
	return err
}

const listCommandHistoryBySession = `-- name: ListCommandHistoryBySession :many
SELECT id, session_id, command_text, created_at, updated_at
FROM command_history
WHERE session_id = ?
ORDER BY created_at ASC
`

func (q *Queries) ListCommandHistoryBySession(ctx context.Context, sessionID string) ([]CommandHistory, error) {
	rows, err := q.query(ctx, q.listCommandHistoryBySessionStmt, listCommandHistoryBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CommandHistory{}
	for rows.Next() {
		var i CommandHistory
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.CommandText,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
